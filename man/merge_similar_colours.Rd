% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_similar_colours.R
\name{merge_similar_colours}
\alias{merge_similar_colours}
\title{merge_similar_colours}
\usage{
merge_similar_colours(pal, deltaE = 5, space = "lab")
}
\arguments{
\item{pal}{A data frame or character vector of hex colours. If a data frame, it must contain
\code{hex} and \code{freq} columns.}

\item{deltaE}{Numeric ≥ 0. The maximum perceptual distance (ΔE2000) allowed within a cluster.
Typical values are between 2 and 6. Default is 5.}

\item{space}{Character. Colour space used for distance calculation (default: \code{"lab"}).
Passed to \code{farver::decode_colour()}.}
}
\value{
A data frame with:
\itemize{
\item \code{group}: cluster label
\item \code{avg_color}: mean colour per group (hex)
\item \code{freq}: total pixel count per group
Rows are sorted by descending frequency.
}
}
\description{
Groups colours that are perceptually close in a specified colour space and merges them.
Accepts either:
\itemize{
\item a \strong{data frame} with columns:
\itemize{
\item \code{hex}: hexadecimal colour codes
\item \code{freq}: pixel counts or weights
}
\item or a \strong{character vector} of hex codes (duplicates allowed).
}

Colours are clustered using single-linkage hierarchical clustering with distances
computed in the chosen space (default: Lab). Clusters are merged by computing
a weighted average colour using \code{\link[=avg_hex]{avg_hex()}}.
}
\details{
Collapse perceptually similar colours in a palette using CIEDE2000 distance.

This perceptual merging avoids the arbitrary choice of \emph{k} in k-means and
is deterministic (no random seed needed).
}
\examples{
# Basic example with a hex vector
hex_vec <- c("#FF0000", "#FE0000", "#00FF00", "#0000FF", "#00FE00")
merge_similar_colours(hex_vec, deltaE = 3)

# Using an internal image
img_path <- system.file("extdata", "sample_img.png", package = "segmentR")
img <- read_image(img_path)
pal <- img_to_palette(img, n = 15, avg_cols = FALSE)
merged <- merge_similar_colours(pal, deltaE = 4)
plot_palette(merged$avg_color)

}
\seealso{
\code{\link[=avg_hex]{avg_hex()}}, \code{\link[=img_to_palette]{img_to_palette()}}, \code{\link[=get_top_col]{get_top_col()}}
}

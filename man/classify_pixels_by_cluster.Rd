% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classify_pixels_by_cluster.R
\name{classify_pixels_by_cluster}
\alias{classify_pixels_by_cluster}
\title{classify_pixels_by_cluster}
\usage{
classify_pixels_by_cluster(
  img,
  palette,
  space = "lab",
  return = c("factor", "mask", "raster"),
  cluster = NULL
)
}
\arguments{
\item{img}{A \emph{magick-image}, file/URL, or an RGB array
(\verb{height × width × 3}, 0–255 or 0–1).}

\item{palette}{Character vector of hex codes \strong{or} data-frame with a
\code{hex} column (e.g. result of \code{merge_similar_colours()}).}

\item{space}{Colour space for the ΔE calculation (default \code{"lab"}).}

\item{return}{\code{"factor"}, \code{"mask"}, or \code{"raster"} (default \code{"factor"}).}

\item{cluster}{Cluster identifier when \code{return = "mask"} – may be a hex
string or a numeric index.}
}
\value{
An object whose class depends on \code{return} (see \emph{Return types} above).
}
\description{
Assign each pixel in an image to the \strong{nearest} reference colour using
CIEDE2000 distance (Lab space by default).
}
\section{Return types}{

\itemize{
\item \strong{"factor"} (default) – a \verb{height × width} matrix whose elements are
\emph{factors} labelled by hex codes (one level per palette entry).
\item \strong{"mask"} – a logical matrix for a single cluster (\code{TRUE} where the pixel
matches \code{cluster}, \code{FALSE} elsewhere).
\item \strong{"raster"} – a base-R S3 object of class \strong{\code{segmentR_raster}} containing
the integer cluster map (\code{data}) plus minimal metadata (\code{nrow}, \code{ncol},
\code{extent}, \code{crs}).  Helper methods \code{print.segmentR_raster()} and
\code{plot.segmentR_raster()} are exported for convenience; advanced users can
coerce \code{data} to a {terra} or {raster} object if needed.
}
}

\examples{
\dontrun{
img <- read_image_from_url(
  "https://upload.wikimedia.org/wikipedia/en/0/02/Homer_Simpson_2006.png")
img <- white_balance_auto(img, "percentile")

pal_raw   <- img_to_palette(img, k = 20)
pal_clean <- merge_similar_colours(pal_raw, deltaE = 4)
pal_hex   <- unique(pal_clean$avg_color)

## Factor matrix
cl_mat <- classify_pixels_by_cluster(img, pal_hex)
table(cl_mat)

## Logical mask of the dominant colour
mask <- classify_pixels_by_cluster(img, pal_hex,
                                   return  = "mask",
                                   cluster = pal_hex[1])
image(mask)

## Lightweight raster
rast <- classify_pixels_by_cluster(img, pal_hex, return = "raster")
print(rast)
plot(rast)  # uses plot.segmentR_raster()
}

}

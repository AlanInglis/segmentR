% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classify_pixels_by_cluster.R
\name{classify_pixels_by_cluster}
\alias{classify_pixels_by_cluster}
\title{classify_pixels_by_cluster}
\usage{
classify_pixels_by_cluster(
  img,
  palette,
  space = "lab",
  output = c("factor", "mask", "raster"),
  cluster = NULL
)
}
\arguments{
\item{img}{A \code{magick-image} object, image path/URL, or an RGB array (\verb{height × width × 3})}

\item{palette}{Character vector of hex codes or a data frame with a \code{hex} column}

\item{space}{Character. Colour space to use for comparison (default: \code{"lab"})}

\item{output}{Type of output: \code{"factor"}, \code{"mask"}, or \code{"raster"} (default: \code{"factor"})}

\item{cluster}{When \code{output = "mask"}, the cluster to extract (hex code or index)}
}
\value{
Depends on \code{output}:
\itemize{
\item \code{"factor"} – matrix of factor hex codes
\item \code{"mask"} – logical matrix
\item \code{"raster"} – object of class \code{segmentR_raster}
}
}
\description{
This function assigns pixels to colour clusters based on perceptual distance
from a reference palette. It supports multiple output types: a factor matrix
of hex labels, a binary mask for a single cluster, or a custom lightweight
raster object.
}
\details{
Assign each pixel in an image to the closest reference colour using
CIEDE2000 distance in Lab colour space.
}
\section{Return types}{

\itemize{
\item \strong{"factor"} (default) – a \verb{height × width} matrix of factor levels, one per hex code
\item \strong{"mask"} – a logical matrix identifying pixels in a specified cluster
\item \strong{"raster"} – a \code{segmentR_raster} S3 object (integer matrix + metadata) with custom print/plot methods
}
}

\examples{
# Load example image from package
img_path <- system.file("extdata", "sample_img.png", package = "segmentR")
img <- read_image(img_path, width = 341, height = 512)

# Extract colour palette
pal <- img_to_palette(img, n = 20, exclude = FALSE)

# Factor matrix of cluster assignments
cl_mat <- classify_pixels_by_cluster(img, palette = pal)
table(cl_mat)
plot_palette(unique(as.vector(cl_mat)))

# Logical mask for the most dominant colour
mask <- classify_pixels_by_cluster(img,
                                   palette = pal,
                                   output = "mask",
                                   cluster = pal[1])
image(t(apply(mask, 2, rev)),  # rotate for display
      col = c("black", "white"),
      axes = FALSE,
      asp = 1)

# Lightweight raster with metadata
rast <- classify_pixels_by_cluster(img, palette = pal, output = "raster")
print(rast)
plot(rast, col = pal)

}
